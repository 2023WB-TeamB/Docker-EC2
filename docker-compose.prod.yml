version: "3.9"

services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/frontend
      - ./frontend/build:/frontend/dist
      - /frontend/node_modules
    tty: true
    stdin_open: true
    networks:
      - gtd

  backend:
    container_name: backend
    env_file:
      - ./backend/.env
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/backend
      - ./backend/static:/backend/static
      - ./backend/log:/var/log/backend
    command: sh -c "gunicorn gtd.wsgi:application --preload --bind 0.0.0.0:8000 --timeout 240 -k gevent"
    restart: on-failure
    ports:
      - "8000:8000"
    expose:
      - 8000
    tty: true
    networks:
      - gtd
    extra_hosts:
      - "host.docker.internal:host-gateway"

  rabbitmq:
    hostname: gtdhost
    container_name: rabbitmq
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit handshake_timeout 120000
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./backend:/backend
    networks:
      - gtd

  celery_worker:
    container_name: celery_worker
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: "celery -A gtd.celery worker --loglevel=info --pool=gevent --concurrency=12"
    depends_on:
      - rabbitmq
      - backend
    volumes:
      - ./backend:/backend
    networks:
      - gtd

  nginx:
    container_name: nginx
    restart: unless-stopped
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "443:443"
    expose:
      - 80
      - 443
    volumes:
      - ./frontend/build:/var/www/frontend
      - ./backend/static:/backend/static
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /etc/nginx/certificate.pem:/etc/nginx/certificate.pem
      - /etc/nginx/private.key:/etc/nginx/private.key
    depends_on:
      - backend
      - frontend
    networks:
      - gtd

  prometheus:
    image: prom/prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    ports:
      - 9090:9090
    container_name: prometheus
    networks:
      - gtd
    extra_hosts:
      - "host.docker.internal:host-gateway"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - 9100:9100
    expose:
      - 9100
    networks:
      - gtd
    extra_hosts:
      - "host.docker.internal:host-gateway"

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    ports:
      - 3001:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    expose:
      - 3001
    networks:
      - gtd

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  gtd:
    driver: bridge
